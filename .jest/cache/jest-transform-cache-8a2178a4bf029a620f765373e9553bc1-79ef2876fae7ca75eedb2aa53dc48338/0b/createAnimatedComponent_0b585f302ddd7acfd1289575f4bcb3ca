c792fbed871445a80558a469954f7934
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createAnimatedComponent;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _View = _interopRequireDefault(require("../Components/View/View"));
var _useMergeRefs = _interopRequireDefault(require("../Utilities/useMergeRefs"));
var _useAnimatedProps3 = _interopRequireDefault(require("./useAnimatedProps"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["style"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function createAnimatedComponent(Component) {
  return React.forwardRef(function (props, forwardedRef) {
    var _useAnimatedProps = (0, _useAnimatedProps3.default)(props),
      _useAnimatedProps2 = (0, _slicedToArray2.default)(_useAnimatedProps, 2),
      reducedProps = _useAnimatedProps2[0],
      callbackRef = _useAnimatedProps2[1];
    var ref = (0, _useMergeRefs.default)(callbackRef, forwardedRef);
    var passthroughAnimatedPropExplicitValues = reducedProps.passthroughAnimatedPropExplicitValues,
      style = reducedProps.style;
    var _ref = passthroughAnimatedPropExplicitValues != null ? passthroughAnimatedPropExplicitValues : {},
      passthroughStyle = _ref.style,
      passthroughProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var mergedStyle = Object.assign({}, style, passthroughStyle);
    return (0, _jsxRuntime.jsx)(Component, Object.assign({}, reducedProps, passthroughProps, {
      style: mergedStyle,
      ref: ref
    }));
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlldyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3VzZU1lcmdlUmVmcyIsIl91c2VBbmltYXRlZFByb3BzMyIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfanN4UnVudGltZSIsIl9leGNsdWRlZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiQ29tcG9uZW50IiwiZm9yd2FyZFJlZiIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwiX3VzZUFuaW1hdGVkUHJvcHMiLCJ1c2VBbmltYXRlZFByb3BzIiwiX3VzZUFuaW1hdGVkUHJvcHMyIiwiX3NsaWNlZFRvQXJyYXkyIiwicmVkdWNlZFByb3BzIiwiY2FsbGJhY2tSZWYiLCJyZWYiLCJ1c2VNZXJnZVJlZnMiLCJwYXNzdGhyb3VnaEFuaW1hdGVkUHJvcEV4cGxpY2l0VmFsdWVzIiwic3R5bGUiLCJfcmVmIiwicGFzc3Rocm91Z2hTdHlsZSIsInBhc3N0aHJvdWdoUHJvcHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwibWVyZ2VkU3R5bGUiLCJhc3NpZ24iLCJqc3giXSwic291cmNlcyI6WyJjcmVhdGVBbmltYXRlZENvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgVmlldyBmcm9tICcuLi9Db21wb25lbnRzL1ZpZXcvVmlldyc7XG5pbXBvcnQgdXNlTWVyZ2VSZWZzIGZyb20gJy4uL1V0aWxpdGllcy91c2VNZXJnZVJlZnMnO1xuaW1wb3J0IHVzZUFuaW1hdGVkUHJvcHMgZnJvbSAnLi91c2VBbmltYXRlZFByb3BzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IHR5cGUgQW5pbWF0ZWRDb21wb25lbnRUeXBlPFxuICAtUHJvcHM6IHsrW3N0cmluZ106IG1peGVkLCAuLi59LFxuICArSW5zdGFuY2UgPSBtaXhlZCxcbj4gPSBSZWFjdC5BYnN0cmFjdENvbXBvbmVudDxcbiAgJE9iak1hcDxcbiAgICBQcm9wcyAmXG4gICAgICAkUmVhZE9ubHk8e1xuICAgICAgICBwYXNzdGhyb3VnaEFuaW1hdGVkUHJvcEV4cGxpY2l0VmFsdWVzPzogUmVhY3QuRWxlbWVudENvbmZpZzxcbiAgICAgICAgICB0eXBlb2YgVmlldyxcbiAgICAgICAgPixcbiAgICAgIH0+LFxuICAgICgpID0+IGFueSxcbiAgPixcbiAgSW5zdGFuY2UsXG4+O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVBbmltYXRlZENvbXBvbmVudDxUUHJvcHM6IHsuLi59LCBUSW5zdGFuY2U+KFxuICBDb21wb25lbnQ6IFJlYWN0LkFic3RyYWN0Q29tcG9uZW50PFRQcm9wcywgVEluc3RhbmNlPixcbik6IEFuaW1hdGVkQ29tcG9uZW50VHlwZTxUUHJvcHMsIFRJbnN0YW5jZT4ge1xuICByZXR1cm4gUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIGZvcndhcmRlZFJlZikgPT4ge1xuICAgIGNvbnN0IFtyZWR1Y2VkUHJvcHMsIGNhbGxiYWNrUmVmXSA9IHVzZUFuaW1hdGVkUHJvcHM8VFByb3BzLCBUSW5zdGFuY2U+KFxuICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF1cbiAgICAgIHByb3BzLFxuICAgICk7XG4gICAgY29uc3QgcmVmID0gdXNlTWVyZ2VSZWZzPFRJbnN0YW5jZSB8IG51bGw+KGNhbGxiYWNrUmVmLCBmb3J3YXJkZWRSZWYpO1xuXG4gICAgLy8gU29tZSBjb21wb25lbnRzIHJlcXVpcmUgZXhwbGljaXQgcGFzc3Rocm91Z2ggdmFsdWVzIGZvciBhbmltYXRpb25cbiAgICAvLyB0byB3b3JrIHByb3Blcmx5LiBGb3IgZXhhbXBsZSwgaWYgYW4gYW5pbWF0ZWQgY29tcG9uZW50IGlzXG4gICAgLy8gdHJhbnNmb3JtZWQgYW5kIFByZXNzYWJsZSwgb25QcmVzcyB3aWxsIG5vdCB3b3JrIGFmdGVyIHRyYW5zZm9ybVxuICAgIC8vIHdpdGhvdXQgdGhlc2UgcGFzc3Rocm91Z2ggdmFsdWVzLlxuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIGNvbnN0IHtwYXNzdGhyb3VnaEFuaW1hdGVkUHJvcEV4cGxpY2l0VmFsdWVzLCBzdHlsZX0gPSByZWR1Y2VkUHJvcHM7XG4gICAgY29uc3Qge3N0eWxlOiBwYXNzdGhyb3VnaFN0eWxlLCAuLi5wYXNzdGhyb3VnaFByb3BzfSA9XG4gICAgICBwYXNzdGhyb3VnaEFuaW1hdGVkUHJvcEV4cGxpY2l0VmFsdWVzID8/IHt9O1xuICAgIGNvbnN0IG1lcmdlZFN0eWxlID0gey4uLnN0eWxlLCAuLi5wYXNzdGhyb3VnaFN0eWxlfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8Q29tcG9uZW50XG4gICAgICAgIHsuLi5yZWR1Y2VkUHJvcHN9XG4gICAgICAgIHsuLi5wYXNzdGhyb3VnaFByb3BzfVxuICAgICAgICBzdHlsZT17bWVyZ2VkU3R5bGV9XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgLz5cbiAgICApO1xuICB9KTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVVB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