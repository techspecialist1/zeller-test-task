b0d9fd21053037bdb93f0484c58a26ae
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _NativeAnimatedHelper = _interopRequireDefault(require("../NativeAnimatedHelper"));
var startNativeAnimationNextId = 1;
var Animation = exports.default = function () {
  function Animation() {
    (0, _classCallCheck2.default)(this, Animation);
  }
  (0, _createClass2.default)(Animation, [{
    key: "start",
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
  }, {
    key: "stop",
    value: function stop() {
      if (this.__nativeId) {
        _NativeAnimatedHelper.default.API.stopAnimation(this.__nativeId);
      }
    }
  }, {
    key: "__getNativeAnimationConfig",
    value: function __getNativeAnimationConfig() {
      throw new Error('This animation type cannot be offloaded to native');
    }
  }, {
    key: "__debouncedOnEnd",
    value: function __debouncedOnEnd(result) {
      var onEnd = this.__onEnd;
      this.__onEnd = null;
      onEnd && onEnd(result);
    }
  }, {
    key: "__startNativeAnimation",
    value: function __startNativeAnimation(animatedValue) {
      var startNativeAnimationWaitId = `${startNativeAnimationNextId}:startAnimation`;
      startNativeAnimationNextId += 1;
      _NativeAnimatedHelper.default.API.setWaitingForIdentifier(startNativeAnimationWaitId);
      try {
        var config = this.__getNativeAnimationConfig();
        animatedValue.__makeNative(config.platformConfig);
        this.__nativeId = _NativeAnimatedHelper.default.generateNewAnimationId();
        _NativeAnimatedHelper.default.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), config, this.__debouncedOnEnd.bind(this));
      } catch (e) {
        throw e;
      } finally {
        _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);
      }
    }
  }]);
  return Animation;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX05hdGl2ZUFuaW1hdGVkSGVscGVyIiwic3RhcnROYXRpdmVBbmltYXRpb25OZXh0SWQiLCJBbmltYXRpb24iLCJrZXkiLCJzdGFydCIsImZyb21WYWx1ZSIsIm9uVXBkYXRlIiwib25FbmQiLCJwcmV2aW91c0FuaW1hdGlvbiIsImFuaW1hdGVkVmFsdWUiLCJzdG9wIiwiX19uYXRpdmVJZCIsIk5hdGl2ZUFuaW1hdGVkSGVscGVyIiwiQVBJIiwic3RvcEFuaW1hdGlvbiIsIl9fZ2V0TmF0aXZlQW5pbWF0aW9uQ29uZmlnIiwiRXJyb3IiLCJfX2RlYm91bmNlZE9uRW5kIiwicmVzdWx0IiwiX19vbkVuZCIsIl9fc3RhcnROYXRpdmVBbmltYXRpb24iLCJzdGFydE5hdGl2ZUFuaW1hdGlvbldhaXRJZCIsInNldFdhaXRpbmdGb3JJZGVudGlmaWVyIiwiY29uZmlnIiwiX19tYWtlTmF0aXZlIiwicGxhdGZvcm1Db25maWciLCJnZW5lcmF0ZU5ld0FuaW1hdGlvbklkIiwic3RhcnRBbmltYXRpbmdOb2RlIiwiX19nZXROYXRpdmVUYWciLCJiaW5kIiwiZSIsInVuc2V0V2FpdGluZ0ZvcklkZW50aWZpZXIiXSwic291cmNlcyI6WyJBbmltYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHlwZSB7UGxhdGZvcm1Db25maWd9IGZyb20gJy4uL0FuaW1hdGVkUGxhdGZvcm1Db25maWcnO1xuaW1wb3J0IHR5cGUgQW5pbWF0ZWRWYWx1ZSBmcm9tICcuLi9ub2Rlcy9BbmltYXRlZFZhbHVlJztcblxuaW1wb3J0IE5hdGl2ZUFuaW1hdGVkSGVscGVyIGZyb20gJy4uL05hdGl2ZUFuaW1hdGVkSGVscGVyJztcblxuZXhwb3J0IHR5cGUgRW5kUmVzdWx0ID0ge2ZpbmlzaGVkOiBib29sZWFuLCAuLi59O1xuZXhwb3J0IHR5cGUgRW5kQ2FsbGJhY2sgPSAocmVzdWx0OiBFbmRSZXN1bHQpID0+IHZvaWQ7XG5cbmV4cG9ydCB0eXBlIEFuaW1hdGlvbkNvbmZpZyA9IHtcbiAgaXNJbnRlcmFjdGlvbj86IGJvb2xlYW4sXG4gIHVzZU5hdGl2ZURyaXZlcjogYm9vbGVhbixcbiAgcGxhdGZvcm1Db25maWc/OiBQbGF0Zm9ybUNvbmZpZyxcbiAgb25Db21wbGV0ZT86ID9FbmRDYWxsYmFjayxcbiAgaXRlcmF0aW9ucz86IG51bWJlcixcbn07XG5cbmxldCBzdGFydE5hdGl2ZUFuaW1hdGlvbk5leHRJZCA9IDE7XG5cbi8vIEltcG9ydGFudCBub3RlOiBzdGFydCgpIGFuZCBzdG9wKCkgd2lsbCBvbmx5IGJlIGNhbGxlZCBhdCBtb3N0IG9uY2UuXG4vLyBPbmNlIGFuIGFuaW1hdGlvbiBoYXMgYmVlbiBzdG9wcGVkIG9yIGZpbmlzaGVkIGl0cyBjb3Vyc2UsIGl0IHdpbGxcbi8vIG5vdCBiZSByZXVzZWQuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmltYXRpb24ge1xuICBfX2FjdGl2ZTogYm9vbGVhbjtcbiAgX19pc0ludGVyYWN0aW9uOiBib29sZWFuO1xuICBfX25hdGl2ZUlkOiBudW1iZXI7XG4gIF9fb25FbmQ6ID9FbmRDYWxsYmFjaztcbiAgX19pdGVyYXRpb25zOiBudW1iZXI7XG4gIHN0YXJ0KFxuICAgIGZyb21WYWx1ZTogbnVtYmVyLFxuICAgIG9uVXBkYXRlOiAodmFsdWU6IG51bWJlcikgPT4gdm9pZCxcbiAgICBvbkVuZDogP0VuZENhbGxiYWNrLFxuICAgIHByZXZpb3VzQW5pbWF0aW9uOiA/QW5pbWF0aW9uLFxuICAgIGFuaW1hdGVkVmFsdWU6IEFuaW1hdGVkVmFsdWUsXG4gICk6IHZvaWQge31cbiAgc3RvcCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fX25hdGl2ZUlkKSB7XG4gICAgICBOYXRpdmVBbmltYXRlZEhlbHBlci5BUEkuc3RvcEFuaW1hdGlvbih0aGlzLl9fbmF0aXZlSWQpO1xuICAgIH1cbiAgfVxuICBfX2dldE5hdGl2ZUFuaW1hdGlvbkNvbmZpZygpOiBhbnkge1xuICAgIC8vIFN1YmNsYXNzZXMgdGhhdCBoYXZlIGNvcnJlc3BvbmRpbmcgYW5pbWF0aW9uIGltcGxlbWVudGF0aW9uIGRvbmUgaW4gbmF0aXZlXG4gICAgLy8gc2hvdWxkIG92ZXJyaWRlIHRoaXMgbWV0aG9kXG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIGFuaW1hdGlvbiB0eXBlIGNhbm5vdCBiZSBvZmZsb2FkZWQgdG8gbmF0aXZlJyk7XG4gIH1cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIGZvciBzdWJjbGFzc2VzIHRvIG1ha2Ugc3VyZSBvbkVuZCBpcyBvbmx5IGNhbGxlZCBvbmNlLlxuICBfX2RlYm91bmNlZE9uRW5kKHJlc3VsdDogRW5kUmVzdWx0KTogdm9pZCB7XG4gICAgY29uc3Qgb25FbmQgPSB0aGlzLl9fb25FbmQ7XG4gICAgdGhpcy5fX29uRW5kID0gbnVsbDtcbiAgICBvbkVuZCAmJiBvbkVuZChyZXN1bHQpO1xuICB9XG4gIF9fc3RhcnROYXRpdmVBbmltYXRpb24oYW5pbWF0ZWRWYWx1ZTogQW5pbWF0ZWRWYWx1ZSk6IHZvaWQge1xuICAgIGNvbnN0IHN0YXJ0TmF0aXZlQW5pbWF0aW9uV2FpdElkID0gYCR7c3RhcnROYXRpdmVBbmltYXRpb25OZXh0SWR9OnN0YXJ0QW5pbWF0aW9uYDtcbiAgICBzdGFydE5hdGl2ZUFuaW1hdGlvbk5leHRJZCArPSAxO1xuICAgIE5hdGl2ZUFuaW1hdGVkSGVscGVyLkFQSS5zZXRXYWl0aW5nRm9ySWRlbnRpZmllcihcbiAgICAgIHN0YXJ0TmF0aXZlQW5pbWF0aW9uV2FpdElkLFxuICAgICk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuX19nZXROYXRpdmVBbmltYXRpb25Db25maWcoKTtcbiAgICAgIGFuaW1hdGVkVmFsdWUuX19tYWtlTmF0aXZlKGNvbmZpZy5wbGF0Zm9ybUNvbmZpZyk7XG4gICAgICB0aGlzLl9fbmF0aXZlSWQgPSBOYXRpdmVBbmltYXRlZEhlbHBlci5nZW5lcmF0ZU5ld0FuaW1hdGlvbklkKCk7XG4gICAgICBOYXRpdmVBbmltYXRlZEhlbHBlci5BUEkuc3RhcnRBbmltYXRpbmdOb2RlKFxuICAgICAgICB0aGlzLl9fbmF0aXZlSWQsXG4gICAgICAgIGFuaW1hdGVkVmFsdWUuX19nZXROYXRpdmVUYWcoKSxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICAvLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddIGFkZGVkIHdoZW4gaW1wcm92aW5nIHR5cGluZyBmb3IgdGhpcyBwYXJhbWV0ZXJzXG4gICAgICAgIHRoaXMuX19kZWJvdW5jZWRPbkVuZC5iaW5kKHRoaXMpLFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBOYXRpdmVBbmltYXRlZEhlbHBlci5BUEkudW5zZXRXYWl0aW5nRm9ySWRlbnRpZmllcihcbiAgICAgICAgc3RhcnROYXRpdmVBbmltYXRpb25XYWl0SWQsXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQUMsTUFBQSxDQUFBQyxjQUFBLENBQUFDLE9BQUE7RUFBQUMsS0FBQTtBQUFBO0FBQUFELE9BQUEsQ0FBQUUsT0FBQTtBQUFBLElBQUFDLGdCQUFBLEdBQUFQLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBTyxhQUFBLEdBQUFSLHNCQUFBLENBQUFDLE9BQUE7QUFLYixJQUFBUSxxQkFBQSxHQUFBVCxzQkFBQSxDQUFBQyxPQUFBO0FBYUEsSUFBSVMsMEJBQTBCLEdBQUcsQ0FBQztBQUFDLElBS2RDLFNBQVMsR0FBQVAsT0FBQSxDQUFBRSxPQUFBO0VBQUEsU0FBQUssVUFBQTtJQUFBLElBQUFKLGdCQUFBLENBQUFELE9BQUEsUUFBQUssU0FBQTtFQUFBO0VBQUEsSUFBQUgsYUFBQSxDQUFBRixPQUFBLEVBQUFLLFNBQUE7SUFBQUMsR0FBQTtJQUFBUCxLQUFBLEVBTTVCLFNBQUFRLE1BQ0VDLFNBQWlCLEVBQ2pCQyxRQUFpQyxFQUNqQ0MsS0FBbUIsRUFDbkJDLGlCQUE2QixFQUM3QkMsYUFBNEIsRUFDdEIsQ0FBQztFQUFDO0lBQUFOLEdBQUE7SUFBQVAsS0FBQSxFQUNWLFNBQUFjLEtBQUEsRUFBYTtNQUNYLElBQUksSUFBSSxDQUFDQyxVQUFVLEVBQUU7UUFDbkJDLDZCQUFvQixDQUFDQyxHQUFHLENBQUNDLGFBQWEsQ0FBQyxJQUFJLENBQUNILFVBQVUsQ0FBQztNQUN6RDtJQUNGO0VBQUM7SUFBQVIsR0FBQTtJQUFBUCxLQUFBLEVBQ0QsU0FBQW1CLDJCQUFBLEVBQWtDO01BR2hDLE1BQU0sSUFBSUMsS0FBSyxDQUFDLG1EQUFtRCxDQUFDO0lBQ3RFO0VBQUM7SUFBQWIsR0FBQTtJQUFBUCxLQUFBLEVBRUQsU0FBQXFCLGlCQUFpQkMsTUFBaUIsRUFBUTtNQUN4QyxJQUFNWCxLQUFLLEdBQUcsSUFBSSxDQUFDWSxPQUFPO01BQzFCLElBQUksQ0FBQ0EsT0FBTyxHQUFHLElBQUk7TUFDbkJaLEtBQUssSUFBSUEsS0FBSyxDQUFDVyxNQUFNLENBQUM7SUFDeEI7RUFBQztJQUFBZixHQUFBO0lBQUFQLEtBQUEsRUFDRCxTQUFBd0IsdUJBQXVCWCxhQUE0QixFQUFRO01BQ3pELElBQU1ZLDBCQUEwQixHQUFJLEdBQUVwQiwwQkFBMkIsaUJBQWdCO01BQ2pGQSwwQkFBMEIsSUFBSSxDQUFDO01BQy9CVyw2QkFBb0IsQ0FBQ0MsR0FBRyxDQUFDUyx1QkFBdUIsQ0FDOUNELDBCQUNGLENBQUM7TUFDRCxJQUFJO1FBQ0YsSUFBTUUsTUFBTSxHQUFHLElBQUksQ0FBQ1IsMEJBQTBCLENBQUMsQ0FBQztRQUNoRE4sYUFBYSxDQUFDZSxZQUFZLENBQUNELE1BQU0sQ0FBQ0UsY0FBYyxDQUFDO1FBQ2pELElBQUksQ0FBQ2QsVUFBVSxHQUFHQyw2QkFBb0IsQ0FBQ2Msc0JBQXNCLENBQUMsQ0FBQztRQUMvRGQsNkJBQW9CLENBQUNDLEdBQUcsQ0FBQ2Msa0JBQWtCLENBQ3pDLElBQUksQ0FBQ2hCLFVBQVUsRUFDZkYsYUFBYSxDQUFDbUIsY0FBYyxDQUFDLENBQUMsRUFDOUJMLE1BQU0sRUFFTixJQUFJLENBQUNOLGdCQUFnQixDQUFDWSxJQUFJLENBQUMsSUFBSSxDQUNqQyxDQUFDO01BQ0gsQ0FBQyxDQUFDLE9BQU9DLENBQUMsRUFBRTtRQUNWLE1BQU1BLENBQUM7TUFDVCxDQUFDLFNBQVM7UUFDUmxCLDZCQUFvQixDQUFDQyxHQUFHLENBQUNrQix5QkFBeUIsQ0FDaERWLDBCQUNGLENBQUM7TUFDSDtJQUNGO0VBQUM7RUFBQSxPQUFBbkIsU0FBQTtBQUFBIn0=