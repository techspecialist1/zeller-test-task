eb144130b38fdda36b939228e414c78b
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _nativeStack = require("@react-navigation/native-stack");
var _pages = require("../../components/pages");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var Stack = (0, _nativeStack.createNativeStackNavigator)();
var HomeStackNavigator = function HomeStackNavigator() {
  return (0, _jsxRuntime.jsxs)(Stack.Navigator, {
    children: [(0, _jsxRuntime.jsx)(Stack.Screen, {
      name: 'Home',
      component: _pages.HomePage,
      options: {
        headerShown: false
      }
    }), (0, _jsxRuntime.jsx)(Stack.Screen, {
      name: 'Details',
      component: _pages.DetailPage,
      options: {
        headerShown: true
      }
    })]
  });
};
var _default = exports.default = HomeStackNavigator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9uYXRpdmVTdGFjayIsIl9wYWdlcyIsIl9qc3hSdW50aW1lIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiU3RhY2siLCJjcmVhdGVOYXRpdmVTdGFja05hdmlnYXRvciIsIkhvbWVTdGFja05hdmlnYXRvciIsImpzeHMiLCJOYXZpZ2F0b3IiLCJjaGlsZHJlbiIsImpzeCIsIlNjcmVlbiIsIm5hbWUiLCJjb21wb25lbnQiLCJIb21lUGFnZSIsIm9wdGlvbnMiLCJoZWFkZXJTaG93biIsIkRldGFpbFBhZ2UiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJpbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtjcmVhdGVOYXRpdmVTdGFja05hdmlnYXRvcn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlLXN0YWNrJztcblxuaW1wb3J0IHtIb21lUGFnZSwgRGV0YWlsUGFnZX0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9wYWdlcyc7XG5cbmV4cG9ydCB0eXBlIFJvb3RTdGFja1Byb3BzID0ge1xuICBIb21lOiB1bmRlZmluZWQ7XG4gIERldGFpbHM6IHVuZGVmaW5lZDtcbn07XG5cbmNvbnN0IFN0YWNrID0gY3JlYXRlTmF0aXZlU3RhY2tOYXZpZ2F0b3I8Um9vdFN0YWNrUHJvcHM+KCk7XG5cbmNvbnN0IEhvbWVTdGFja05hdmlnYXRvciA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8U3RhY2suTmF2aWdhdG9yPlxuICAgICAgPFN0YWNrLlNjcmVlblxuICAgICAgICBuYW1lPXsnSG9tZSd9XG4gICAgICAgIGNvbXBvbmVudD17SG9tZVBhZ2V9XG4gICAgICAgIG9wdGlvbnM9e3toZWFkZXJTaG93bjogZmFsc2V9fVxuICAgICAgLz5cbiAgICAgIDxTdGFjay5TY3JlZW5cbiAgICAgICAgbmFtZT17J0RldGFpbHMnfVxuICAgICAgICBjb21wb25lbnQ9e0RldGFpbFBhZ2V9XG4gICAgICAgIG9wdGlvbnM9e3toZWFkZXJTaG93bjogdHJ1ZX19XG4gICAgICAvPlxuICAgIDwvU3RhY2suTmF2aWdhdG9yPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSG9tZVN0YWNrTmF2aWdhdG9yO1xuIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBQUEsS0FBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsTUFBQSxHQUFBRixPQUFBO0FBQTRELElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUFBLFNBQUFJLHlCQUFBQyxDQUFBLDZCQUFBQyxPQUFBLG1CQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxDQUFBLFdBQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLEtBQUFGLENBQUE7QUFBQSxTQUFBTix3QkFBQU0sQ0FBQSxFQUFBRSxDQUFBLFNBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQSxlQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFdBQUFLLE9BQUEsRUFBQUwsQ0FBQSxRQUFBRyxDQUFBLEdBQUFKLHdCQUFBLENBQUFHLENBQUEsT0FBQUMsQ0FBQSxJQUFBQSxDQUFBLENBQUFHLEdBQUEsQ0FBQU4sQ0FBQSxVQUFBRyxDQUFBLENBQUFJLEdBQUEsQ0FBQVAsQ0FBQSxPQUFBUSxDQUFBLEtBQUFDLFNBQUEsVUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxDQUFBLElBQUFkLENBQUEsb0JBQUFjLENBQUEsSUFBQUgsTUFBQSxDQUFBSSxTQUFBLENBQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBakIsQ0FBQSxFQUFBYyxDQUFBLFNBQUFJLENBQUEsR0FBQVIsQ0FBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFiLENBQUEsRUFBQWMsQ0FBQSxVQUFBSSxDQUFBLEtBQUFBLENBQUEsQ0FBQVgsR0FBQSxJQUFBVyxDQUFBLENBQUFDLEdBQUEsSUFBQVIsTUFBQSxDQUFBQyxjQUFBLENBQUFKLENBQUEsRUFBQU0sQ0FBQSxFQUFBSSxDQUFBLElBQUFWLENBQUEsQ0FBQU0sQ0FBQSxJQUFBZCxDQUFBLENBQUFjLENBQUEsWUFBQU4sQ0FBQSxDQUFBSCxPQUFBLEdBQUFMLENBQUEsRUFBQUcsQ0FBQSxJQUFBQSxDQUFBLENBQUFnQixHQUFBLENBQUFuQixDQUFBLEVBQUFRLENBQUEsR0FBQUEsQ0FBQTtBQU81RCxJQUFNWSxLQUFLLEdBQUcsSUFBQUMsdUNBQTBCLEVBQWlCLENBQUM7QUFFMUQsSUFBTUMsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFrQkEsQ0FBQSxFQUFTO0VBQy9CLE9BQ0UsSUFBQXhCLFdBQUEsQ0FBQXlCLElBQUEsRUFBQ0gsS0FBSyxDQUFDSSxTQUFTO0lBQUFDLFFBQUEsR0FDZCxJQUFBM0IsV0FBQSxDQUFBNEIsR0FBQSxFQUFDTixLQUFLLENBQUNPLE1BQU07TUFDWEMsSUFBSSxFQUFFLE1BQU87TUFDYkMsU0FBUyxFQUFFQyxlQUFTO01BQ3BCQyxPQUFPLEVBQUU7UUFBQ0MsV0FBVyxFQUFFO01BQUs7SUFBRSxDQUMvQixDQUFDLEVBQ0YsSUFBQWxDLFdBQUEsQ0FBQTRCLEdBQUEsRUFBQ04sS0FBSyxDQUFDTyxNQUFNO01BQ1hDLElBQUksRUFBRSxTQUFVO01BQ2hCQyxTQUFTLEVBQUVJLGlCQUFXO01BQ3RCRixPQUFPLEVBQUU7UUFBQ0MsV0FBVyxFQUFFO01BQUk7SUFBRSxDQUM5QixDQUFDO0VBQUEsQ0FDYSxDQUFDO0FBRXRCLENBQUM7QUFBQyxJQUFBRSxRQUFBLEdBQUFDLE9BQUEsQ0FBQTlCLE9BQUEsR0FFYWlCLGtCQUFrQiJ9