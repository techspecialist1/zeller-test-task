c66a78360e702dca87a9791c29ab2721
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var EventEmitter = exports.default = function () {
  function EventEmitter() {
    (0, _classCallCheck2.default)(this, EventEmitter);
    this._registry = {};
  }
  (0, _createClass2.default)(EventEmitter, [{
    key: "addListener",
    value: function addListener(eventType, listener, context) {
      if (typeof listener !== 'function') {
        throw new TypeError('EventEmitter.addListener(...): 2nd argument must be a function.');
      }
      var registrations = allocate(this._registry, eventType);
      var registration = {
        context: context,
        listener: listener,
        remove: function remove() {
          registrations.delete(registration);
        }
      };
      registrations.add(registration);
      return registration;
    }
  }, {
    key: "emit",
    value: function emit(eventType) {
      var registrations = this._registry[eventType];
      if (registrations != null) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        for (var registration of (0, _toConsumableArray2.default)(registrations)) {
          registration.listener.apply(registration.context, args);
        }
      }
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners(eventType) {
      if (eventType == null) {
        this._registry = {};
      } else {
        delete this._registry[eventType];
      }
    }
  }, {
    key: "listenerCount",
    value: function listenerCount(eventType) {
      var registrations = this._registry[eventType];
      return registrations == null ? 0 : registrations.size;
    }
  }]);
  return EventEmitter;
}();
function allocate(registry, eventType) {
  var registrations = registry[eventType];
  if (registrations == null) {
    registrations = new Set();
    registry[eventType] = registrations;
  }
  return registrations;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJleHBvcnRzIiwiZGVmYXVsdCIsIl9jbGFzc0NhbGxDaGVjazIiLCJfcmVnaXN0cnkiLCJfY3JlYXRlQ2xhc3MyIiwia2V5IiwidmFsdWUiLCJhZGRMaXN0ZW5lciIsImV2ZW50VHlwZSIsImxpc3RlbmVyIiwiY29udGV4dCIsIlR5cGVFcnJvciIsInJlZ2lzdHJhdGlvbnMiLCJhbGxvY2F0ZSIsInJlZ2lzdHJhdGlvbiIsInJlbW92ZSIsImRlbGV0ZSIsImFkZCIsImVtaXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJhcHBseSIsInJlbW92ZUFsbExpc3RlbmVycyIsImxpc3RlbmVyQ291bnQiLCJzaXplIiwicmVnaXN0cnkiLCJTZXQiXSwic291cmNlcyI6WyJFdmVudEVtaXR0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdFxuICogQGZvcm1hdFxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgRXZlbnRTdWJzY3JpcHRpb24ge1xuICByZW1vdmUoKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRXZlbnRFbWl0dGVyPFRFdmVudFRvQXJnc01hcDogey4uLn0+IHtcbiAgYWRkTGlzdGVuZXI8VEV2ZW50OiAkS2V5czxURXZlbnRUb0FyZ3NNYXA+PihcbiAgICBldmVudFR5cGU6IFRFdmVudCxcbiAgICBsaXN0ZW5lcjogKC4uLmFyZ3M6ICRFbGVtZW50VHlwZTxURXZlbnRUb0FyZ3NNYXAsIFRFdmVudD4pID0+IG1peGVkLFxuICAgIGNvbnRleHQ/OiBtaXhlZCxcbiAgKTogRXZlbnRTdWJzY3JpcHRpb247XG5cbiAgZW1pdDxURXZlbnQ6ICRLZXlzPFRFdmVudFRvQXJnc01hcD4+KFxuICAgIGV2ZW50VHlwZTogVEV2ZW50LFxuICAgIC4uLmFyZ3M6ICRFbGVtZW50VHlwZTxURXZlbnRUb0FyZ3NNYXAsIFRFdmVudD5cbiAgKTogdm9pZDtcblxuICByZW1vdmVBbGxMaXN0ZW5lcnM8VEV2ZW50OiAkS2V5czxURXZlbnRUb0FyZ3NNYXA+PihldmVudFR5cGU/OiA/VEV2ZW50KTogdm9pZDtcblxuICBsaXN0ZW5lckNvdW50PFRFdmVudDogJEtleXM8VEV2ZW50VG9BcmdzTWFwPj4oZXZlbnRUeXBlOiBURXZlbnQpOiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBSZWdpc3RyYXRpb248VEFyZ3M+IHtcbiAgK2NvbnRleHQ6IG1peGVkO1xuICArbGlzdGVuZXI6ICguLi5hcmdzOiBUQXJncykgPT4gbWl4ZWQ7XG4gICtyZW1vdmU6ICgpID0+IHZvaWQ7XG59XG5cbnR5cGUgUmVnaXN0cnk8VEV2ZW50VG9BcmdzTWFwOiB7Li4ufT4gPSAkT2JqTWFwPFxuICBURXZlbnRUb0FyZ3NNYXAsXG4gIDxUQXJncz4oVEFyZ3MpID0+IFNldDxSZWdpc3RyYXRpb248VEFyZ3M+Pixcbj47XG5cbi8qKlxuICogRXZlbnRFbWl0dGVyIG1hbmFnZXMgbGlzdGVuZXJzIGFuZCBwdWJsaXNoZXMgZXZlbnRzIHRvIHRoZW0uXG4gKlxuICogRXZlbnRFbWl0dGVyIGFjY2VwdHMgYSBzaW5nbGUgdHlwZSBwYXJhbWV0ZXIgdGhhdCBkZWZpbmVzIHRoZSB2YWxpZCBldmVudHNcbiAqIGFuZCBhc3NvY2lhdGVkIGxpc3RlbmVyIGFyZ3VtZW50KHMpLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogICBjb25zdCBlbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjx7XG4gKiAgICAgc3VjY2VzczogW251bWJlciwgc3RyaW5nXSxcbiAqICAgICBlcnJvcjogW0Vycm9yXSxcbiAqICAgfT4oKTtcbiAqXG4gKiAgIGVtaXR0ZXIub24oJ3N1Y2Nlc3MnLCAoc3RhdHVzQ29kZSwgcmVzcG9uc2VUZXh0KSA9PiB7Li4ufSk7XG4gKiAgIGVtaXR0ZXIuZW1pdCgnc3VjY2VzcycsIDIwMCwgJy4uLicpO1xuICpcbiAqICAgZW1pdHRlci5vbignZXJyb3InLCBlcnJvciA9PiB7Li4ufSk7XG4gKiAgIGVtaXR0ZXIuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ1Jlc291cmNlIG5vdCBmb3VuZCcpKTtcbiAqXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50RW1pdHRlcjxURXZlbnRUb0FyZ3NNYXA6IHsuLi59PlxuICBpbXBsZW1lbnRzIElFdmVudEVtaXR0ZXI8VEV2ZW50VG9BcmdzTWFwPlxue1xuICBfcmVnaXN0cnk6IFJlZ2lzdHJ5PFRFdmVudFRvQXJnc01hcD4gPSB7fTtcblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGEgbGlzdGVuZXIgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgc3VwcGxpZWQgZXZlbnQgaXMgZW1pdHRlZC5cbiAgICogUmV0dXJucyBhIHN1YnNjcmlwdGlvbiB0aGF0IGhhcyBhIGByZW1vdmVgIG1ldGhvZCB0byB1bmRvIHJlZ2lzdHJhdGlvbi5cbiAgICovXG4gIGFkZExpc3RlbmVyPFRFdmVudDogJEtleXM8VEV2ZW50VG9BcmdzTWFwPj4oXG4gICAgZXZlbnRUeXBlOiBURXZlbnQsXG4gICAgbGlzdGVuZXI6ICguLi5hcmdzOiAkRWxlbWVudFR5cGU8VEV2ZW50VG9BcmdzTWFwLCBURXZlbnQ+KSA9PiBtaXhlZCxcbiAgICBjb250ZXh0OiBtaXhlZCxcbiAgKTogRXZlbnRTdWJzY3JpcHRpb24ge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdFdmVudEVtaXR0ZXIuYWRkTGlzdGVuZXIoLi4uKTogMm5kIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbi4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgcmVnaXN0cmF0aW9ucyA9IGFsbG9jYXRlPF8sIF8sIFRFdmVudFRvQXJnc01hcFtURXZlbnRdPihcbiAgICAgIHRoaXMuX3JlZ2lzdHJ5LFxuICAgICAgZXZlbnRUeXBlLFxuICAgICk7XG4gICAgY29uc3QgcmVnaXN0cmF0aW9uOiBSZWdpc3RyYXRpb248JEVsZW1lbnRUeXBlPFRFdmVudFRvQXJnc01hcCwgVEV2ZW50Pj4gPSB7XG4gICAgICBjb250ZXh0LFxuICAgICAgbGlzdGVuZXIsXG4gICAgICByZW1vdmUoKTogdm9pZCB7XG4gICAgICAgIHJlZ2lzdHJhdGlvbnMuZGVsZXRlKHJlZ2lzdHJhdGlvbik7XG4gICAgICB9LFxuICAgIH07XG4gICAgcmVnaXN0cmF0aW9ucy5hZGQocmVnaXN0cmF0aW9uKTtcbiAgICByZXR1cm4gcmVnaXN0cmF0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEVtaXRzIHRoZSBzdXBwbGllZCBldmVudC4gQWRkaXRpb25hbCBhcmd1bWVudHMgc3VwcGxpZWQgdG8gYGVtaXRgIHdpbGwgYmVcbiAgICogcGFzc2VkIHRocm91Z2ggdG8gZWFjaCBvZiB0aGUgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMuXG4gICAqXG4gICAqIElmIGEgbGlzdGVuZXIgbW9kaWZpZXMgdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciB0aGUgc2FtZSBldmVudCwgdGhvc2VcbiAgICogY2hhbmdlcyB3aWxsIG5vdCBiZSByZWZsZWN0ZWQgaW4gdGhlIGN1cnJlbnQgaW52b2NhdGlvbiBvZiBgZW1pdGAuXG4gICAqL1xuICBlbWl0PFRFdmVudDogJEtleXM8VEV2ZW50VG9BcmdzTWFwPj4oXG4gICAgZXZlbnRUeXBlOiBURXZlbnQsXG4gICAgLi4uYXJnczogJEVsZW1lbnRUeXBlPFRFdmVudFRvQXJnc01hcCwgVEV2ZW50PlxuICApOiB2b2lkIHtcbiAgICBjb25zdCByZWdpc3RyYXRpb25zOiA/U2V0PFxuICAgICAgUmVnaXN0cmF0aW9uPCRFbGVtZW50VHlwZTxURXZlbnRUb0FyZ3NNYXAsIFRFdmVudD4+LFxuICAgID4gPSB0aGlzLl9yZWdpc3RyeVtldmVudFR5cGVdO1xuICAgIGlmIChyZWdpc3RyYXRpb25zICE9IG51bGwpIHtcbiAgICAgIGZvciAoY29uc3QgcmVnaXN0cmF0aW9uIG9mIFsuLi5yZWdpc3RyYXRpb25zXSkge1xuICAgICAgICByZWdpc3RyYXRpb24ubGlzdGVuZXIuYXBwbHkocmVnaXN0cmF0aW9uLmNvbnRleHQsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCByZWdpc3RlcmVkIGxpc3RlbmVycy5cbiAgICovXG4gIHJlbW92ZUFsbExpc3RlbmVyczxURXZlbnQ6ICRLZXlzPFRFdmVudFRvQXJnc01hcD4+KFxuICAgIGV2ZW50VHlwZT86ID9URXZlbnQsXG4gICk6IHZvaWQge1xuICAgIGlmIChldmVudFR5cGUgPT0gbnVsbCkge1xuICAgICAgdGhpcy5fcmVnaXN0cnkgPSB7fTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHRoaXMuX3JlZ2lzdHJ5W2V2ZW50VHlwZV07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG51bWJlciBvZiByZWdpc3RlcmVkIGxpc3RlbmVycyBmb3IgdGhlIHN1cHBsaWVkIGV2ZW50LlxuICAgKi9cbiAgbGlzdGVuZXJDb3VudDxURXZlbnQ6ICRLZXlzPFRFdmVudFRvQXJnc01hcD4+KGV2ZW50VHlwZTogVEV2ZW50KTogbnVtYmVyIHtcbiAgICBjb25zdCByZWdpc3RyYXRpb25zOiA/U2V0PFJlZ2lzdHJhdGlvbjxtaXhlZD4+ID0gdGhpcy5fcmVnaXN0cnlbZXZlbnRUeXBlXTtcbiAgICByZXR1cm4gcmVnaXN0cmF0aW9ucyA9PSBudWxsID8gMCA6IHJlZ2lzdHJhdGlvbnMuc2l6ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvY2F0ZTxcbiAgVEV2ZW50VG9BcmdzTWFwOiB7Li4ufSxcbiAgVEV2ZW50OiAkS2V5czxURXZlbnRUb0FyZ3NNYXA+LFxuICBURXZlbnRBcmdzOiAkRWxlbWVudFR5cGU8VEV2ZW50VG9BcmdzTWFwLCBURXZlbnQ+LFxuPihcbiAgcmVnaXN0cnk6IFJlZ2lzdHJ5PFRFdmVudFRvQXJnc01hcD4sXG4gIGV2ZW50VHlwZTogVEV2ZW50LFxuKTogU2V0PFJlZ2lzdHJhdGlvbjxURXZlbnRBcmdzPj4ge1xuICBsZXQgcmVnaXN0cmF0aW9uczogP1NldDxSZWdpc3RyYXRpb248VEV2ZW50QXJncz4+ID0gcmVnaXN0cnlbZXZlbnRUeXBlXTtcbiAgaWYgKHJlZ2lzdHJhdGlvbnMgPT0gbnVsbCkge1xuICAgIHJlZ2lzdHJhdGlvbnMgPSBuZXcgU2V0KCk7XG4gICAgcmVnaXN0cnlbZXZlbnRUeXBlXSA9IHJlZ2lzdHJhdGlvbnM7XG4gIH1cbiAgcmV0dXJuIHJlZ2lzdHJhdGlvbnM7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0lBOERxQkEsWUFBWSxHQUFBQyxPQUFBLENBQUFDLE9BQUE7RUFBQSxTQUFBRixhQUFBO0lBQUEsSUFBQUcsZ0JBQUEsQ0FBQUQsT0FBQSxRQUFBRixZQUFBO0lBQUEsS0FHL0JJLFNBQVMsR0FBOEIsQ0FBQyxDQUFDO0VBQUE7RUFBQSxJQUFBQyxhQUFBLENBQUFILE9BQUEsRUFBQUYsWUFBQTtJQUFBTSxHQUFBO0lBQUFDLEtBQUEsRUFNekMsU0FBQUMsWUFDRUMsU0FBaUIsRUFDakJDLFFBQW1FLEVBQ25FQyxPQUFjLEVBQ0s7TUFDbkIsSUFBSSxPQUFPRCxRQUFRLEtBQUssVUFBVSxFQUFFO1FBQ2xDLE1BQU0sSUFBSUUsU0FBUyxDQUNqQixpRUFDRixDQUFDO01BQ0g7TUFDQSxJQUFNQyxhQUFhLEdBQUdDLFFBQVEsQ0FDNUIsSUFBSSxDQUFDVixTQUFTLEVBQ2RLLFNBQ0YsQ0FBQztNQUNELElBQU1NLFlBQWlFLEdBQUc7UUFDeEVKLE9BQU8sRUFBUEEsT0FBTztRQUNQRCxRQUFRLEVBQVJBLFFBQVE7UUFDUk0sTUFBTSxXQUFBQSxPQUFBLEVBQVM7VUFDYkgsYUFBYSxDQUFDSSxNQUFNLENBQUNGLFlBQVksQ0FBQztRQUNwQztNQUNGLENBQUM7TUFDREYsYUFBYSxDQUFDSyxHQUFHLENBQUNILFlBQVksQ0FBQztNQUMvQixPQUFPQSxZQUFZO0lBQ3JCO0VBQUM7SUFBQVQsR0FBQTtJQUFBQyxLQUFBLEVBU0QsU0FBQVksS0FDRVYsU0FBaUIsRUFFWDtNQUNOLElBQU1JLGFBRUwsR0FBRyxJQUFJLENBQUNULFNBQVMsQ0FBQ0ssU0FBUyxDQUFDO01BQzdCLElBQUlJLGFBQWEsSUFBSSxJQUFJLEVBQUU7UUFBQSxTQUFBTyxJQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxFQUx4QkMsSUFBSSxPQUFBQyxLQUFBLENBQUFKLElBQUEsT0FBQUEsSUFBQSxXQUFBSyxJQUFBLE1BQUFBLElBQUEsR0FBQUwsSUFBQSxFQUFBSyxJQUFBO1VBQUpGLElBQUksQ0FBQUUsSUFBQSxRQUFBSixTQUFBLENBQUFJLElBQUE7UUFBQTtRQU1MLEtBQUssSUFBTVYsWUFBWSxRQUFBVyxtQkFBQSxDQUFBeEIsT0FBQSxFQUFRVyxhQUFhLEdBQUc7VUFDN0NFLFlBQVksQ0FBQ0wsUUFBUSxDQUFDaUIsS0FBSyxDQUFDWixZQUFZLENBQUNKLE9BQU8sRUFBRVksSUFBSSxDQUFDO1FBQ3pEO01BQ0Y7SUFDRjtFQUFDO0lBQUFqQixHQUFBO0lBQUFDLEtBQUEsRUFLRCxTQUFBcUIsbUJBQ0VuQixTQUFtQixFQUNiO01BQ04sSUFBSUEsU0FBUyxJQUFJLElBQUksRUFBRTtRQUNyQixJQUFJLENBQUNMLFNBQVMsR0FBRyxDQUFDLENBQUM7TUFDckIsQ0FBQyxNQUFNO1FBQ0wsT0FBTyxJQUFJLENBQUNBLFNBQVMsQ0FBQ0ssU0FBUyxDQUFDO01BQ2xDO0lBQ0Y7RUFBQztJQUFBSCxHQUFBO0lBQUFDLEtBQUEsRUFLRCxTQUFBc0IsY0FBOENwQixTQUFpQixFQUFVO01BQ3ZFLElBQU1JLGFBQXdDLEdBQUcsSUFBSSxDQUFDVCxTQUFTLENBQUNLLFNBQVMsQ0FBQztNQUMxRSxPQUFPSSxhQUFhLElBQUksSUFBSSxHQUFHLENBQUMsR0FBR0EsYUFBYSxDQUFDaUIsSUFBSTtJQUN2RDtFQUFDO0VBQUEsT0FBQTlCLFlBQUE7QUFBQTtBQUdILFNBQVNjLFFBQVFBLENBS2ZpQixRQUFtQyxFQUNuQ3RCLFNBQWlCLEVBQ2M7RUFDL0IsSUFBSUksYUFBNkMsR0FBR2tCLFFBQVEsQ0FBQ3RCLFNBQVMsQ0FBQztFQUN2RSxJQUFJSSxhQUFhLElBQUksSUFBSSxFQUFFO0lBQ3pCQSxhQUFhLEdBQUcsSUFBSW1CLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCRCxRQUFRLENBQUN0QixTQUFTLENBQUMsR0FBR0ksYUFBYTtFQUNyQztFQUNBLE9BQU9BLGFBQWE7QUFDdEIifQ==