5c3746a92ea60c7f0b8bfd7df0241899
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useAndroidRippleForView;
var _processColor = _interopRequireDefault(require("../../StyleSheet/processColor"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _View = _interopRequireDefault(require("../View/View"));
var _ViewNativeComponent = require("../View/ViewNativeComponent");
var _invariant = _interopRequireDefault(require("invariant"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useAndroidRippleForView(rippleConfig, viewRef) {
  var _ref = rippleConfig != null ? rippleConfig : {},
    color = _ref.color,
    borderless = _ref.borderless,
    radius = _ref.radius,
    foreground = _ref.foreground;
  return (0, _react.useMemo)(function () {
    if (_Platform.default.OS === 'android' && _Platform.default.Version >= 21 && (color != null || borderless != null || radius != null)) {
      var processedColor = (0, _processColor.default)(color);
      (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');
      var nativeRippleValue = {
        type: 'RippleAndroid',
        color: processedColor,
        borderless: borderless === true,
        rippleRadius: radius
      };
      return {
        viewProps: foreground === true ? {
          nativeForegroundAndroid: nativeRippleValue
        } : {
          nativeBackgroundAndroid: nativeRippleValue
        },
        onPressIn: function onPressIn(event) {
          var view = viewRef.current;
          if (view != null) {
            var _event$nativeEvent$lo, _event$nativeEvent$lo2;
            _ViewNativeComponent.Commands.hotspotUpdate(view, (_event$nativeEvent$lo = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo : 0, (_event$nativeEvent$lo2 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo2 : 0);
            _ViewNativeComponent.Commands.setPressed(view, true);
          }
        },
        onPressMove: function onPressMove(event) {
          var view = viewRef.current;
          if (view != null) {
            var _event$nativeEvent$lo3, _event$nativeEvent$lo4;
            _ViewNativeComponent.Commands.hotspotUpdate(view, (_event$nativeEvent$lo3 = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo3 : 0, (_event$nativeEvent$lo4 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo4 : 0);
          }
        },
        onPressOut: function onPressOut(event) {
          var view = viewRef.current;
          if (view != null) {
            _ViewNativeComponent.Commands.setPressed(view, false);
          }
        }
      };
    }
    return null;
  }, [borderless, color, foreground, radius, viewRef]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,